package maryk.rocksdb


/**
 * SstFileWriter is used to create sst files that can be added to the
 * database later. All keys in files generated by SstFileWriter will have
 * sequence number = 0.
 */
expect class SstFileWriter
    /**
     * SstFileWriter Constructor.
     *
     * @param envOptions [EnvOptions] instance.
     * @param options [Options] instance.
     */
    constructor(envOptions: EnvOptions, options: Options)
: RocksObject {

    /**
     * Prepare SstFileWriter to write to a file.
     * @param filePath the location of file
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun open(filePath: String)

    /**
     * Add a Put key with value to currently opened file.
     *
     * @param key the specified key to be inserted.
     * @param value the value associated with the specified key.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun put(key: Slice, value: Slice)

    /**
     * Add a Put key with value to currently opened file.
     *
     * @param key the specified key to be inserted.
     * @param value the value associated with the specified key.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun put(key: DirectSlice, value: DirectSlice)

    /**
     * Add a Put key with value to currently opened file.
     *
     * @param key the specified key to be inserted.
     * @param value the value associated with the specified key.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun put(key: ByteArray, value: ByteArray)

    /**
     * Add a Merge key with value to currently opened file.
     *
     * @param key the specified key to be merged.
     * @param value the value to be merged with the current value for
     * the specified key.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun merge(key: Slice, value: Slice)

    /**
     * Add a Merge key with value to currently opened file.
     *
     * @param key the specified key to be merged.
     * @param value the value to be merged with the current value for
     * the specified key.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun merge(key: ByteArray, value: ByteArray)

    /**
     * Add a Merge key with value to currently opened file.
     *
     * @param key the specified key to be merged.
     * @param value the value to be merged with the current value for
     * the specified key.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun merge(key: DirectSlice, value: DirectSlice)

    /**
     * Add a deletion key to currently opened file.
     *
     * @param key the specified key to be deleted.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun delete(key: Slice)

    /**
     * Add a deletion key to currently opened file.
     *
     * @param key the specified key to be deleted.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun delete(key: DirectSlice)

    /**
     * Add a deletion key to currently opened file.
     *
     * @param key the specified key to be deleted.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun delete(key: ByteArray)

    /**
     * Finish the process and close the sst file.
     *
     * @throws RocksDBException thrown if error happens in underlying
     * native library.
     */
    fun finish()
}
